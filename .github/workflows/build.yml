name: Build & Deploy
run-name: Build & Deploy by @${{ github.actor }}

on:
  push:
    branches:
      - main
    paths:
      - somos/**

  workflow_dispatch:
    inputs:
      version:
        description: 'Version type to bump (major, minor, patch)'
        required: false
        default: 'patch'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Git config
        run: |
          git config --global user.name "thatgaypigeon"
          git config --global user.email "pigeon43.stuff@gmail.com"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install coverage Bandit pre-commit bump-my-version
        # run: pip install -r requirements.txt

      # Stash version
      - name: Stash version
        shell: bash
        id: set-version
        run: |
          export ver=$(bump-my-version show new_version --increment ${{ github.event.inputs.version || 'patch' }})
          echo "{version}={$ver}" >> $GITHUB_OUTPUT

      # Bump
      - name: Bump
        id: bump
        run: bump-my-version bump ${{ github.event.inputs.version || 'patch' }}

      # Lint
      - name: Lint
        run: pre-commit run --all-files

      # Code coverage
      - name: Run tests with coverage
        run: coverage run -m unittest discover tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      # Security checks
      - name: Security checks
        run: bandit -r .

      # Pre-deploy commit
      - name: Pre-deploy commit
        run: |
          git add .
          git commit -m "Pre-deploy commit for ${{ steps.set-version.outputs.version }}"

    outputs:
      var_version: ${{ steps.set-version.outputs.version }}

  deploy:
    if: success()
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Test
        run: |
          echo "${{ needs.build.outputs.var_version }}"

      - name: Git config
        run: |
          git config --global user.name "thatgaypigeon"
          git config --global user.email "pigeon43.stuff@gmail.com"

      - name: Checkout
        uses: actions/checkout@v4

      # Deploy build
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ needs.build.outputs.var_version }}"
          release_name: "Release ${{ needs.build.outputs.var_version }}"
          draft: false
          prerelease: false

      # Deploy to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
