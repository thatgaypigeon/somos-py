name: Build & Deploy
run-name: Build & Deploy by @${{ github.actor }}

on:
  push:
    branches:
      - dev
    paths:
      - somos/**

jobs:
  bump:
    runs-on: ubuntu-latest

    steps:
      - name: Git config
        run: |
          git config --global user.name "thatgaypigeon"
          git config --global user.email "pigeon43.stuff@gmail.com"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install bump-my-version
        # run: pip install -r requirements.txt

      # Stash version
      - name: Stash version
        shell: bash
        id: set-version
        run: |
          export cur_ver=$(bump-my-version show new_version build)
          export new_ver=$(bump-my-version show new_version --increment build)
          echo "cur_version=$cur_ver" >> $GITHUB_OUTPUT
          echo "new_version=$new_ver" >> $GITHUB_OUTPUT

      # Bump
      - name: Bump
        id: bump
        run: bump-my-version bump build

    outputs:
      var_cur_version: ${{ steps.set-version.outputs.cur_version }}
      var_new_version: ${{ steps.set-version.outputs.new_version }}

  lint:
    if: success()
    runs-on: ubuntu-latest
    needs: bump

    steps:
      - name: Git config
        run: |
          git config --global user.name "thatgaypigeon"
          git config --global user.email "pigeon43.stuff@gmail.com"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install black flake8 isort mypy

      - name: Sort imports (isort)
        run: isort .

      - name: Format code (black)
        run: black .

      - name: Lint code (flake8)
        run: flake8 .

      - name: Type check (mypy)
        run: mypy .

      # Pre-test commit
      - name: Pre-test commit
        run: |
          git add .
          git commit -m "Pre-test commit for ${{ needs.bump.outputs.var_new_version }}"

  test:
    if: success()
    runs-on: ubuntu-latest
    needs: [bump, lint]

    steps:
      - name: Git config
        run: |
          git config --global user.name "thatgaypigeon"
          git config --global user.email "pigeon43.stuff@gmail.com"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install bandit pytest pytest-cov
        # run: pip install -r requirements.txt

      # Security checks
      - name: Run security checks (bandit)
        run: bandit -r .

      # Code coverage
      - name: Run tests with coverage (pytest)
        run: pytest --cov=somos --cov-report=xml tests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true

      # Pre-build commit
      - name: Pre-build commit
        run: |
          git add .
          git commit -m "Pre-build commit for ${{ needs.bump.outputs.var_new_version }}"

  build:
    if: success()
    runs-on: ubuntu-latest
    needs: [bump, test]

    steps:
      - name: Git config
        run: |
          git config --global user.name "thatgaypigeon"
          git config --global user.email "pigeon43.stuff@gmail.com"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: pip install build
        # run: pip install -r requirements.txt

      - name: Build
        id: build
        run: python -m build

  deploy:
    if: success()
    runs-on: ubuntu-latest
    needs: [bump, build]

    steps:
      - name: Git config
        run: |
          git config --global user.name "thatgaypigeon"
          git config --global user.email "pigeon43.stuff@gmail.com"

      - name: Checkout
        uses: actions/checkout@v4

      # Deploy build
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT_TOKEN }}
        with:
          tag_name: "v${{ needs.bump.outputs.var_new_version }}"
          release_name: "Release ${{ needs.bump.outputs.var_new_version }}"
          draft: false
          prerelease: false

      # Deploy to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
